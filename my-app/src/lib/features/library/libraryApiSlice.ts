import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react"; 

// Define a service using a base URL and expected endpoints
export const libraryApiSlice = createApi({
  baseQuery: fetchBaseQuery({ baseUrl: "http://localhost:3000/api/library" }),
  reducerPath: "libraryApi",
  // Tag types are used for caching and invalidation.
  tagTypes: ["Library"],
  endpoints: (build) => ({
    // Supply generics for the return type (in this case `libraryItem`)
    // and the expected query argument. If there is no argument, use `void`
    // for the argument type instead.
    getLibrary: build.query<libraryItem[], number>({
      query: (page = 1) => `?page=${page}`,
      // `providesTags` determines which 'tag' is attached to the
      // cached data returned by the query.
      providesTags: (result, error, id) => [{ type: "Library", id }],
    }),
  }),
});

// Hooks are auto-generated by RTK-Query
export const { useGetLibraryQuery } = libraryApiSlice;

